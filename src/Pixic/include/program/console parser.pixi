fn parse_console()
{
	$set_parameter=0
	$jump_table=new(128, 1, INT)
	clean($jump_table)
	$jump_table['-']=handle_extended_command
	$jump_table['h']=show_help
	$jump_table['o']=set_output
	$jump_table['f']=set_folder
	$jump_table['t']=set_translate_only
	$argument_count=argc()
	for ($a=3; $a!=$argument_count; $a+1)
	{
		$argument=argv($a)
		if $set_parameter==1
		{
			if output>=0
			{
				remove(output)
			}
			output=clone($argument)
			$set_parameter=0
		}
		else{if $set_parameter==2
		{
			if folder>=0
			{
				remove(folder)
			}
			folder=clone($argument)
			$set_parameter=0
		}
		else{if $argument[0]=='-'
		{
			if $jump_table[$argument[1]]
			{
				$set_parameter=$jump_table[$argument[1]]($argument)
			}
			else
			{
				show_error_unknown_parameter($argument)
			}
		}
		else{if input==-1
		{
			if $argument[0]=='/'
			{
				if $argument[1]=='-'||$argument[1]=='/'
				{
					if $argument[2]
					{
						input=new(get_size($argument)-1, 1, INT8)
						copy(input, $argument, 0, 1)
					}
				}
				else
				{
					input=clone($argument)
				}
			}
			else
			{
				input=clone($argument)
			}
		}}}}
		remove($argument)
	}
	remove($jump_table)
	if input!=-1
	{
		if !translate_only&&output==-1||folder==-1
		{
			$input_size=get_size(input)
			if $input_size>4
			{
				if !strcmp(input, $input_size-4, ".txt")
				{
					$program_name=new($input_size-4, 1, INT8)
					copy($program_name, input)
				}
				else{if $input_size>5
				{
					if !strcmp(input, $input_size-5, ".pixi")
					{
						$program_name=new($input_size-5, 1, INT8)
						copy($program_name, input)
					}
					else
					{
						$program_name=clone(input)
					}
				}
				else
				{
					$program_name=clone(input)
				}}
			}
			else
			{
				$program_name=clone(input)
			}
			$a=get_size($program_name)-1 while $a>=0&&$program_name[$a]!='/'&&$program_name[$a]!='\\'
			{
				$a-1
			}
			if $a>=0
			{
				$a+1
				copy($program_name, $program_name, 0, $a)
				resize($program_name, get_size($program_name)-$a)
			}
			if !translate_only&&output==-1
			{
				output=clone($program_name)
				if !strstr(OS_NAME, "win")
				{
					strcat(output, ".exe")
				}
			}
			if folder==-1
			{
				if translate_only
				{
					folder=clone($program_name)
				}
				else
				{
					if strstr(OS_NAME, "linux")>=0
					{
						folder=clone("/tmp/Pixic/")
					}
					else{if strstr(OS_NAME, "win")>=0
					{
						folder=argv(2)
						strcat(folder, "\\Pixic\\")
					}}
					strcat(folder, $program_name)
				}
			}
			remove($program_name)
		}
	}
	else
	{
		fprintf(STDERR, "pixic: error: no input file.
Type \"pixic --help\" for more details.\n")
		exit(2)
	}
}
fn handle_extended_command($argument)
{
	if !strcmp($argument, 2, "help")
	{
		show_help($argument)
	}
	else{if strstr($argument, 2, "output=")==2
	{
		if $argument[9]
		{
			if output>=0
			{
				remove(output)
			}
			output=new(get_size($argument)-9, 1, INT8)
			copy(output, $argument, 0, 9)
		}
	}
	else{if strstr($argument, 2, "folder=")==2
	{
		if $argument[9]
		{
			if folder>=0
			{
				remove(folder)
			}
			folder=new(get_size($argument)-9, 1, INT8)
			copy(folder, $argument, 0, 9)
		}
	}
	else{if !strcmp($argument, 2, "translate-only")
	{
		set_translate_only($argument)
	}
	else
	{
		show_error_unknown_parameter($argument)
	}}}}
	ret(0)
}
fn show_help($argument)
{
	printf("Pixic v0.0.0
Pixic translates Pixilang code into C programming language and compiles it with external C compiler increasing performance of the program.
Usage.
  pixic [options] <input file>
Options.
  -h               --help                 Show this message.
  -o <executable>  --output=<executable>  Name of the output executable.
  -f <folder>      --folder=<folder>      Folder for translated files. Default is \"/tmp/Pixic/<input file>\" for normal mode and \"./<input file>\" for \"--translate-only\" mode.
  -t               --translate-only       Translate only (executable won't be generated).
")
	exit(0)
}
fn show_error_unknown_parameter($argument)
{
	fprintf(STDERR, "pixic: error: unknown parameter: \"%s\".
Type \"pixic --help\" for more details.\n", $argument)
	exit(1)
}
fn set_output($argument)
{
	if $argument[2]
	{
		if output>=0
		{
			remove(output)
		}
		output=new(get_size($argument)-2, 1, INT8)
		copy(output, $argument, 0, 2)
		ret(0)
	}
	ret(1)
}
fn set_folder($argument)
{
	if $argument[2]
	{
		if folder>=0
		{
			remove(folder)
		}
		folder=new(get_size($argument)-2, 1, INT8)
		copy(folder, $argument, 0, 2)
		ret(0)
	}
	ret(2)
}
fn set_translate_only($argument)
{
	translate_only=1
	ret(0)
}