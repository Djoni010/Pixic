/*
Copyright (C) 2022 Серый MLGamer <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/Text.pixi
 *
 * Dependencies.
 * program/translator/parser/char filters.pixi
 */

fn Text_new($file_name)
{
	$file=fopen($file_name, "rb")
	if !$file
	{
		ret(-1)
	}
	$self=new()

	$self.file_name=$file_name
	fseek($file, 0, SEEK_END)
	$length=ftell($file)
	if $length
	{
		$data=new($length, 1, INT8)
		fseek($file, 0, SEEK_SET)
		fread($data, $length, $file)
		$self.data=$data
		$lines=new(3, 1, INT)
		clean($lines)
		$state=0
		$environment=new()
		$environment.line=0
		$environment.real_line=0
		for ($a=0; $a!=$length; $a+1)
		{
			$state=Text_new_jump0[$state]($data[$a]&0xFF, $a, $lines, $environment)
		}
		if $state==2
		{
			$lines[1, $environment.line]=$a
		}
		$self.lines=$lines
		remove($environment)
	}
	else
	{
		$self.data=-1
		$self.lines=-1
	}
	fclose($file)

	ret($self)
}
Text_new_jump0=new(4, 1, INT)
Text_new_jump0[0]=
{
	if $1=='\n'
	{
		$4.real_line+1
		ret(0)
	}
	if $1=='\r'
	{
		$4.real_line+1
		ret(1)
	}
	if is_space($1)
	{
		ret(0)
	}
	$line=$4.line
	resize($3, 3, $line+1)
	$3[0, $line]=$2
	$3[2, $line]=$4.real_line+1
	ret(2)
}
Text_new_jump0[1]=
{
	if $1=='\r'
	{
		$4.real_line+1
		ret(1)
	}
	if is_space($1)
	{
		ret(0)
	}
	$line=$4.line
	resize($3, 3, $line+1)
	$3[0, $line]=$2
	$3[2, $line]=$4.real_line+1
	ret(2)
}
Text_new_jump0[2]=
{
	if $1=='\n'
	{
		$3[1, $4.line]=$2
		$4.line+1
		$4.real_line+1
		ret(0)
	}
	if $1=='\r'
	{
		$3[1, $4.line]=$2
		$4.line+1
		$4.real_line+1
		ret(1)
	}
	if is_space($1)
	{
		$3[1, $4.line]=$2
		ret(3)
	}
	ret(2)
}
Text_new_jump0[3]=
{
	if $1=='\n'
	{
		$4.line+1
		$4.real_line+1
		ret(0)
	}
	if $1=='\r'
	{
		$4.line+1
		$4.real_line+1
		ret(1)
	}
	if is_space($1)
	{
		ret(3)
	}
	ret(2)
}
fn Text_remove($self)
{
	remove($self.data)
	remove($self.lines)

	remove($self)
}
fn Text_get_line($self, $dest, $line)
{
	$lines=$self.lines
	if $line>0&&$line<=get_ysize($lines)
	{
		$size=$lines[1, $line]
		if get_size($dest)>$size
		{
			resize($dest, $size)
		}
		copy($dest, $self.data, 0, $lines[0, $line], $size)
		ret(0)
	}
	ret(1)
}