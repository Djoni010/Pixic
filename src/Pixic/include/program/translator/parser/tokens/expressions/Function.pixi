/*
Copyright (C) 2022 Серый MLGamer <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file Container.pixi
 *
 * Dependencies.
 * program/translator/parser/tokens/expressions/Postfix.pixi
 * program/translator/parser/tokens/expressions/expression.pixi
 */

fn Function_new($text, $positions)
{
	$self=Postfix_new()
	$self.f=Function

	promise_position($positions)
	if get_char($text, $positions)!='('
	{
		reject_position($positions)

		remove($self)
		ret(-1)
	}
	if skip_spaces($text, $positions)
	{
		Stack_get($positions).line-1
		syntax_error_expected($text, $positions, ')')
	}
	$arguments=Stack_new(INT)
	$argument=parse_expression($text, $positions)
	if $argument<0
	{
		promise_position($positions)
		if get_char($text, $positions)!=')'
		{
			reject_position($positions)
			syntax_error_expected($text, $positions, ')')
		}
		resolve_position($positions)
		$self.arguments=$arguments
		resolve_position($positions)

		ret($self)
	}
	while 1
	{
		if skip_spaces($text, $positions)
		{
			Stack_get($positions).line-1
			syntax_error_expected($text, $positions, ')')
		}
		Stack_push($arguments, $argument)
		promise_position($positions)
		$argument=get_char($text, $positions)
		if $argument==')'
		{
			resolve_position($positions)
			$self.arguments=$arguments
			resolve_position($positions)

			ret($self)
		}
		if $argument==','
		{
			resolve_position($positions)
			if skip_spaces($text, $positions)
			{
				Stack_get($positions).line-1
				syntax_error_expected_argument($text, $positions)
			}
			$argument=parse_expression($text, $positions)
			if $argument<0
			{
				syntax_error_expected_argument($text, $positions)
			}
		}
		else
		{
			reject_position($positions)
			syntax_error_expected($text, $positions, ')')
		}
	}
}
Function=new()
Function.remove=Function_remove
Function.show=Function_show
fn Function_remove($self)
{
	$arguments=$self.arguments
	while $arguments.pointer>=0
	{
		$argument=Stack_pop($arguments)
		$argument.f.remove($argument)
	}
	remove($arguments)

	Postfix_remove($self)
}
fn Function_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Function\"") next_property()
		indent() logf("\"ID\": ") $self.ID.f.show($self.ID) next_property()
		indent() logf("\"arguments\": ")
		$arguments=$self.arguments
		$arguments_count=$arguments.pointer+1
		if $arguments_count
		{
			begin_array()
				for ($a=0; $a!=$arguments_count; $a+1)
				{
					$argument=$arguments[$a]
					indent() $argument.f.show($argument)
						if $a!=$arguments_count-1
						{
							next_property()
						}
				}
			end_array()
		}
		else
		{
			logf("null")
		}
	end_object()
}