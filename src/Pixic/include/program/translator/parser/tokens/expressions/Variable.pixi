/*
Copyright (C) 2022 Серый MLGamer <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/parser/tokens/expressions/Variable.pixi
 *
 * Dependencies.
 * program/translator/parser/tokens/expressions/Expression_traits.pixi
 * program/translator/parser/parsing functions.pixi
 * program/info/syntax errors.pixi
 * program/translator/parser/tokens/show.pixi
 */

fn Variable_new($text, $positions)
{
	$self=Expression_traits_new(1, 0)
	$self.f=Variable

	promise_position($positions)
	$self.text=$text.data
	$name_start=Stack_get($positions).index
	$self.name_start=$name_start
	$char=get_char($text, $positions)
	if $char=='#'||($char>='0'&&$char<='9')
	{
		reject_position($positions)

		remove($self)
		ret(-1)
	}
	if is_symbolic($char)
	{
		promise_position($positions)
		while 1
		{
			if is_symbolic(get_char($text, $positions))
			{
				resolve_position($positions)
				promise_position($positions)
			}
			else
			{
				reject_position($positions)
				$name_length=Stack_get($positions).index-$name_start
				$test=new($name_length, 1, INT8)
				copy($test, $text.data, 0, $name_start)
				$keywords_count=get_size(KEYWORDS)
				for ($a=0; $a!=$keywords_count; $a+1)
				{
					if !strcmp($test, KEYWORDS[$a])
					{
						reject_position($positions)
						syntax_error_reserved_identifier($text, $positions)
					}
				}
				remove($test)
				$self.name_length=$name_length
				resolve_position($positions)

				ret($self)
			}
		}
	}
	reject_position($positions)

	remove($self)
	ret(-2)
}
Variable=new()
Variable.remove=Variable_remove
Variable.show=Variable_show
fn Variable_remove($self)
{
	remove($self)
}
fn Variable_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Variable\"") next_property()
		indent() logf("\"name\": ")
			$name=new($self.name_length, 1, INT8)
			copy($name, $self.text, 0, $self.name_start)
			logf("\"%s\"", $name)
			remove($name)
	end_object()
}