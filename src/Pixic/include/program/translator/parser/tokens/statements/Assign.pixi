/*
Copyright (C) 2022 Серый MLGamer <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/parser/tokens/statements/Assign.pixi
 *
 * Include before.
 * program/translator/parser/tokens/expressions/expression.pixi
 * Dependencies.
 * program/translator/parser/tokens/statements/Statement.pixi
 * program/translator/parser/tokens/expressions/operand.pixi
 * program/info/syntax errors.pixi
 */

fn Assign_new($text, $positions)
{
	$self=Statement_new($text, $positions)
	$self.f=Assign

	promise_position($positions)
	$token=parse_operand($text, $positions)
	if $token<0
	{
		reject_position($positions)

		remove($self)
		ret(-1)
	}
	if !$token.assignable
	{
		$token.f.remove($token)
		reject_position($positions)

		remove($self)
		ret(-2)
	}
	$self.variable=$token
	if skip_spaces($text, $positions)
	{
		Stack_get($positions).line-1
		syntax_error_expected_operator($text, $positions)
	}
	promise_position($positions)
	$sequence=Stack_new(INT8)
	while 1
	{
		$token=get_prop(Assign_new_jump0, $sequence)(get_char($text, $positions), $sequence, $positions)
		if $token>-2
		{
			break
		}
	}
	remove($sequence)
	if $token!=-1
	{
		resolve_position($positions)
		$self.operator=$token
		if skip_spaces($text, $positions)
		{
			Stack_get($positions).line-1
			syntax_error_expected_expression($text, $positions)
		}
		$token=parse_expression($text, $positions)
		if $token<0
		{
			syntax_error_expected_expression($text, $positions)
		}
		$self.value=$token
		$self.last_line=Stack_get($positions).line+1
		resolve_position($positions)

		ret($self)
	}
	reject_position($positions)
	syntax_error_expected_operator($text, $positions)
}
Assign_new_jump0=clone(parse_expression_jump0)
set_prop(Assign_new_jump0, operator_strings[OPERATOR_assign],
	{
		if $1!='='
		{
			reject_position($3)
			ret(OPERATOR_assign)
		}
		resolve_position($3)
		ret(OPERATOR_eq)
	}
)
Assign=new()
Assign.remove=Assign_remove
Assign.show=Assign_show
fn Assign_remove($self)
{
	$self.variable.f.remove($self.variable)
	$self.value.f.remove($self.value)

	remove($self)
}
fn Assign_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Assign\"") next_property()
		indent() Statement_show($self) next_property()
		indent() logf("\"variable\": ") $self.variable.f.show($self.variable) next_property()
		indent() logf("\"operator\": \"%s\"", operator_strings[$self.operator]) next_property()
		indent() logf("\"value\": ") $self.value.f.show($self.value)
	end_object()
}