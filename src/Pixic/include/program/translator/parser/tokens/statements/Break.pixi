/*
Copyright (C) 2022 Серый MLGamer <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/parser/tokens/statements/Break.pixi
 *
 * Dependencies.
 * program/translator/parser/tokens/statements/Statement.pixi
 * program/translator/parser/parsing functions.pixi
 * program/translator/parser/tokens/show.pixi
 */

fn Break_new($text, $positions)
{
	$self=Statement_new($text, $positions)
	$self.f=Break

	promise_position($positions)
	$test=new(get_size(KEYWORDS[KEYWORD_breakall]), 1, INT8)
	clean($test)
	copy($test, $text.data, 0, Stack_get($positions).index)
	if !strstr($test, KEYWORDS[KEYWORD_break])
	{
		$self.stages=1
		Stack_get($positions).index+get_size(KEYWORDS[KEYWORD_break])
	}
	else{if !strstr($test, KEYWORDS[KEYWORD_break2])
	{
		$self.stages=2
		Stack_get($positions).index+get_size(KEYWORDS[KEYWORD_break2])
	}
	else{if !strstr($test, KEYWORDS[KEYWORD_break3])
	{
		$self.stages=3
		Stack_get($positions).index+get_size(KEYWORDS[KEYWORD_break3])
	}
	else{if !strstr($test, KEYWORDS[KEYWORD_break4])
	{
		$self.stages=4
		Stack_get($positions).index+get_size(KEYWORDS[KEYWORD_break4])
	}
	else{if !strstr($test, KEYWORDS[KEYWORD_breakall])
	{
		$self.stages=0
		Stack_get($positions).index+get_size($test)
	}
	else
	{
		remove($test)
		reject_position($positions)

		remove($self)
		ret(-1)
	}}}}}
	remove($test)
	promise_position($positions)
	$char=get_char($text, $positions)
	if is_symbolic($char)
	{
		reject_position($positions)
		reject_position($positions)

		remove($self)
		ret(-2)
	}
	reject_position($positions)
	resolve_position($positions)

	ret($self)
}
Break=new()
Break.remove=Break_remove
Break.show=Break_show
fn Break_remove($self)
{
	remove($self)
}
fn Break_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Break\"") next_property()
		indent() Statement_show($self) next_property()
		indent() logf("\"value\": \"break")
			$stages=$self.stages
			if $stages==1
			{
				logf("\"")
			}
			else{if $stages>=2
			{
				logf("%i\"", $stages)
			}
			else
			{
				logf("all\"")
			}}
	end_object()
}