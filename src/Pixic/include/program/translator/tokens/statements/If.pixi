/*
(C) 2022-2023 Серый MLGamer <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/statements/If.pixi
 *
 * Dependencies.
 * program/translator/tokens/statements/Statement.pixi
 * program/translator/parser/parsing functions.pixi
 * program/info/syntax errors.pixi
 * program/translator/tokens/expressions/expression.pixi
 * program/translator/tokens/statements/Block.pixi
 */

fn If_new($text)
{
	$self=Statement_new($text)
	$self.f=If

	Text_promise_position($text)
	$test=new(get_size(KEYWORD_ELSE), 1, INT8)
	clean($test)
	copy($test, $text.data, 0, $text[0, $text.top])
	if strstr($test, KEYWORD_IF)
	{
		remove($test)
		Text_reject_position($text)

		remove($self)
		ret(-1)
	}
	$text[0, $text.top]+get_size(KEYWORD_IF)
	Text_promise_position($text)
	if is_symbolic(Text_get($text))
	{
		Text_reject_position($text)
		Text_reject_position($text)

		remove($self)
		ret(-2)
	}
	Text_reject_position($text)
	if skip_spaces($text)
	{
		$text[1, $text.top]-1
		syntax_error_expected_expression($text)
	}
	$token=parse_expression($text)
	if $token<0
	{
		syntax_error_expected_expression($text)
	}
	$self.condition=$token
	$self.last_line=$text[1, $text.top]+1
	if skip_spaces($text)
	{
		$text[1, $text.top]-1
		syntax_error_expected($text, '{')
	}
	$token=Block_new($text)
	if $token<0
	{
		syntax_error_expected($text, '{')
	}
	$self.then=$token
	Text_promise_position($text)
	if skip_spaces($text)
	{
		Text_reject_position($text)
		remove($test)
		$self.else=-1
		Text_resolve_position($text)

		ret($self)
	}
	clean($test)
	copy($test, $text.data, 0, $text[0, $text.top])
	if strstr($test, KEYWORD_ELSE)
	{
		Text_reject_position($text)
		remove($test)
		$self.else=-2
		Text_resolve_position($text)

		ret($self)
	}
	$text[0, $text.top]+get_size($test)
	remove($test)
	Text_promise_position($text)
	if is_symbolic(Text_get($text))
	{
		Text_reject_position($text)
		Text_reject_position($text)
		$self.else=-3
		Text_resolve_position($text)

		ret($self)
	}
	Text_reject_position($text)
	if skip_spaces($text)
	{
		$text[1, $text.top]-1
		syntax_error_expected($text, '{')
	}
	$token=Block_new($text)
	if $token<0
	{
		syntax_error_expected($text, '{')
	}
	Text_resolve_position($text)
	$self.else=$token
	Text_resolve_position($text)

	ret($self)
}
If=new(1, 1, INT8)
If.generate=If_generate
If.show=If_show
If.remove=If_remove
fn If_generate($self)
{
	generator_deinit()
	developer_error_not_implemented("if/else structure generation")
}
fn If_show($self)
{
	begin_object()
		indent() logf("\"type\": \"If\"") next_property()
		indent() Statement_show($self) next_property()
		indent() logf("\"condition\": ") $self.condition.f.show($self.condition) next_property()
		indent() logf("\"then\": ") Block_show($self.then)
		if $self.else>=0
		{
				next_property()
			indent() logf("\"else\": ") Block_show($self.else)
		}
	end_object()
}
fn If_remove($self)
{
	$self.condition.f.remove($self.condition)
	Block_remove($self.then)
	if $self.else>=0
	{
		Block_remove($self.else)
	}

	remove($self)
}