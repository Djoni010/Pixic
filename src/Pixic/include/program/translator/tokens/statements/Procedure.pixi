/*
(C) 2022-2023 Серый MLGamer <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/statements/Procedure.pixi
 *
 * Dependencies.
 * program/translator/tokens/statements/Statement.pixi
 * program/translator/tokens/expressions/operand.pixi
 * program/translator/tokens/show.pixi
 */

fn Procedure_new($text)
{
	$self=Statement_new($text)
	$self.f=Procedure

	Text_promise_position($text)
	$token=parse_operand($text)
	if $token<0
	{
		Text_reject_position($text)

		remove($self)
		ret(-1)
	}
	if !$token.is_function
	{
		$token.f.remove($token)
		Text_reject_position($text)

		remove($self)
		ret(-2)
	}
	$self.function=$token
	$self.last_line=$text[1, $text.top]+1
	Text_resolve_position($text)

	ret($self)
}
Procedure=new(1, 1, INT8)
Procedure.generate=Procedure_generate
Procedure.show=Procedure_show
Procedure.remove=Procedure_remove
fn Procedure_generate($self)
{
	Statement_generate($self)
	$function_text=Stack_get(functions_texts)
	$statements_record=$function_text.statements_record
	Function_text_indent($function_text) Function_generate($self.function) fputs(";\n", $statements_record)
}
fn Procedure_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Procedure\"") next_property()
		indent() Statement_show($self) next_property()
		$function=$self.function
		indent() logf("\"ID\": ") $function.ID.f.show($function.ID) next_property()
		indent() logf("\"arguments\": ")
			$arguments=$function.arguments
			$arguments_count=$arguments.top+1
			if $arguments_count
			{
				begin_array()
					$a=0 while 1
					{
						$argument=$arguments[$a]
						indent() $argument.f.show($argument)
						if $a!=$arguments_count-1
						{
								next_property()
							$a+1
						}
						else
						{
							break
						}
					}
				end_array()
			}
			else
			{
				logf("null")
			}
	end_object()
}
fn Procedure_remove($self)
{
	$self.function.f.remove($self.function)

	remove($self)
}