/*
(C) 2022-2023 Серый MLGamer <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/expressions/expression.pixi
 *
 * Include before.
 * program/translator/tokens/show.pixi
 * Dependencies.
 * program/translator/parser/parsers groups.pixi
 * program/translator/tokens/expressions/Binary_operator.pixi
 */

fn parse_expression($text)
{
	$space=0
	while 1
	{
		if $space
		{
			if skip_spaces($text)
			{
				$text[1, $text.top]-1
				syntax_error_expected_operand($text)
			}
			$token=parse_multiple(operands, $text)
			if $token<0
			{
				syntax_error_expected_operand($text)
			}
		}
		else
		{
			$token=parse_multiple(operands, $text)
			if $token<0
			{
				ret(-1)
			}
			$operands=Stack_new(INT)
			$operators=Stack_new(INT)
			$space=1
		}
		Stack_push($operands, $token)
		Text_promise_position($text)
		if skip_spaces($text)
		{
			Text_reject_position($text)
			break
		}
		$sequence=Stack_new(INT8)
		while 1
		{
			$token=get_prop(parse_expression_jump0, $sequence)(Text_get($text), $sequence, $text)
			if $token>=-1
			{
				break
			}
		}
		remove($sequence)
		if $token!=-1
		{
			Text_resolve_position($text)
			Stack_push($operators, $token)
		}
		else
		{
			Text_reject_position($text)
			break
		}
	}
	$token=parse_expression_part($operands, $operators, 0, $operands.top)
	remove($operands)
	remove($operators)
	ret($token)
}
parse_expression_jump0=new(1, 1, INT8)
set_prop(parse_expression_jump0, "",
	{
		$operator=parse_expression_char_table[$1]
		if $operator
		{
			if $operator!=-1
			{
				ret($operator)
			}
			Text_promise_position($3)
			Stack_push($2, $1)
			ret(-2)
		}
		if $1!='%'
		{
			ret(-1)
		}
		ret(OPERATOR_MOD)
	}
)
parse_expression_jump0.d=
{
	if $1!='i'
	{
		Text_reject_position($3)
		ret(-1)
	}
	Stack_push($2, $1)
	ret(-2)
}
parse_expression_jump0.di=
{
	if $1!='v'
	{
		Text_reject_position($3)
		ret(-1)
	}
	Text_resolve_position($3)
	Text_promise_position($3)
	Stack_push($2, $1)
	ret(-2)
}
parse_expression_jump0.div=
{
	Text_reject_position($3)
	if is_symbolic($1)
	{
		ret(-1)
	}
	ret(OPERATOR_IDIV)
}
set_prop(parse_expression_jump0, operator_strings[OPERATOR_NOT],
	{
		if $1!='='
		{
			Text_reject_position($3)
			ret(-1)
		}
		Text_resolve_position($3)
		ret(OPERATOR_NEQ)
	}
)
set_prop(parse_expression_jump0, operator_strings[OPERATOR_G],
	{
		if $1=='>'
		{
			Text_resolve_position($3)
			ret(OPERATOR_RSH)
		}
		if $1=='='
		{
			Text_resolve_position($3)
			ret(OPERATOR_GEQ)
		}
		Text_reject_position($3)
		ret(OPERATOR_G)
	}
)
set_prop(parse_expression_jump0, operator_strings[OPERATOR_L],
	{
		if $1=='<'
		{
			Text_resolve_position($3)
			ret(OPERATOR_LSH)
		}
		if $1=='='
		{
			Text_resolve_position($3)
			ret(OPERATOR_LEQ)
		}
		Text_reject_position($3)
		ret(OPERATOR_L)
	}
)
set_prop(parse_expression_jump0, operator_strings[OPERATOR_ASSIGN],
	{
		if $1!='='
		{
			Text_reject_position($3)
			ret(-1)
		}
		Text_resolve_position($3)
		ret(OPERATOR_EQ)
	}
)
set_prop(parse_expression_jump0, operator_strings[OPERATOR_BOR],
	{
		if $1!='|'
		{
			Text_reject_position($3)
			ret(OPERATOR_BOR)
		}
		Text_resolve_position($3)
		ret(OPERATOR_OR)
	}
)
set_prop(parse_expression_jump0, operator_strings[OPERATOR_BAND],
	{
		if $1!='&'
		{
			Text_reject_position($3)
			ret(OPERATOR_BAND)
		}
		Text_resolve_position($3)
		ret(OPERATOR_AND)
	}
)
parse_expression_char_table=new(128, 1, INT8)
clean(parse_expression_char_table)
parse_expression_char_table['%']=OPERATOR_MOD
parse_expression_char_table['/']=OPERATOR_DIV
parse_expression_char_table['d']=-1
parse_expression_char_table['*']=OPERATOR_MUL
parse_expression_char_table['!']=-1
parse_expression_char_table['+']=OPERATOR_ADD
parse_expression_char_table['-']=OPERATOR_SUB
parse_expression_char_table['>']=-1
parse_expression_char_table['<']=-1
parse_expression_char_table['=']=-1
parse_expression_char_table['|']=-1
parse_expression_char_table['^']=OPERATOR_XOR
parse_expression_char_table['&']=-1
fn parse_expression_part($operands, $operators, $start_operator, $end_operator)
{
	if $end_operator-$start_operator
	{
		$priority_record=0
		$position_record=0
		for ($a=$start_operator; $a!=$end_operator; $a+1)
		{
			$priority=PRIORITY[$operators[$a]]
			if $priority>=$priority_record
			{
				$priority_record=$priority
				$position_record=$a
			}
		}
		ret(
			Binary_operator_new(
				$operators[$position_record],
				parse_expression_part(
					$operands,
					$operators,
					$start_operator,
					$position_record
				),
				parse_expression_part(
					$operands,
					$operators,
					$position_record+1,
					$end_operator
				)
			)
		)
	}
	else
	{
		ret($operands[$start_operator])
	}
}