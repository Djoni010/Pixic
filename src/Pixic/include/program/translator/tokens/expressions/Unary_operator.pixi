/*
(C) 2022-2023 Серый MLGamer <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/expressions/Unary_operator.pixi
 *
 * Dependencies.
 * program/translator/parser/parsing functions.pixi
 * program/info/syntax errors.pixi
 * program/translator/generator/generator.pixi
 * program/translator/tokens/show.pixi
 */

fn Unary_operator_new($text)
{
	$self=new(1, 1, INT8)
	$self.f=Unary_operator

	Text_promise_position($text)
	$token=Text_get($text)
	if $token=='!'
	{
		$self.operator=OPERATOR_NOT
	}
	else{if $token=='~'
	{
		$self.operator=OPERATOR_BNOT
	}
	else{if $token=='-'
	{
		$self.operator=OPERATOR_NEG
	}
	else
	{
		Text_reject_position($text)

		remove($self)
		ret(-1)
	}}}
	if skip_spaces($text)
	{
		$text[1, $text.top]-1
		syntax_error_expected_operand($text)
	}
	$token=parse_multiple(operands, $text)
	if $token<0
	{
		syntax_error_expected_operand($text)
	}
	$self.operand=$token
	Text_resolve_position($text)

	ret($self)
}
Unary_operator=new(1, 1, INT8)
Unary_operator.generate=Unary_operator_generate
Unary_operator.generate_call=Unary_operator_generate_call
Unary_operator.show=Unary_operator_show
Unary_operator.remove=Unary_operator_remove
fn Unary_operator_generate($self)
{
	generator_deinit()
	developer_error_not_implemented("unary operator generation")
}
fn Unary_operator_generate_call($self)
{
	generator_deinit()
	developer_error_not_implemented("function call by address")
}
fn Unary_operator_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Unary_operator\"") next_property()
		indent() logf("\"operator\": \"%s\"", operator_strings[$self.operator]) next_property()
		indent() logf("\"operand\": ") $self.operand.f.show($self.operand)
	end_object()
}
fn Unary_operator_remove($self)
{
	$self.operand.f.remove($self.operand)

	remove($self)
}