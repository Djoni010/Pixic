/*
(C) 2022-2023 Серый MLGamer <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * @file program/translator/tokens/expressions/Number.pixi
 *
 * Dependencies.
 * program/translator/tokens/expressions/Expression_traits.pixi
 * program/translator/parser/parsing functions.pixi
 * program/info/syntax errors.pixi
 * program/translator/generator/generator.pixi
 * program/translator/tokens/show.pixi
 */

NUMBER_INT=  0
NUMBER_BIN=  1
NUMBER_HEX=  2
NUMBER_COLOR=3
NUMBER_FLOAT=4

fn Number_new($text)
{
	$self=Expression_traits_new(0, 0)
	$self.f=Number

	Text_promise_position($text)
	$self.text=$text.data
	if Text_get($text)!='-'
	{
		Text_reject_position($text)
		$self.minus=0
		Text_promise_position($text)
	}
	else
	{
		if skip_spaces($text)
		{
			Text_reject_position($text)

			remove($self)
			ret(-1)
		}
		$self.minus=1
	}
	$self.value_start=$text[0, $text.top]
	Text_promise_position($text)
	$state=0
	while 1
	{
		$state=Number_new_jump0[$state](Text_get($text), $self, $text)
		if $state<0
		{
			break
		}
		else
		{
			Text_resolve_position($text)
			Text_promise_position($text)
		}
	}
	Text_reject_position($text)
	if $state==-1
	{
		$self.value_length=$text[0, $text.top]-$self.value_start
		Text_resolve_position($text)

		ret($self)
	}
	if $state==-2
	{
		Text_reject_position($text)

		remove($self)
		ret(-2)
	}
	if $state==-3
	{
		syntax_error_invalid_number($text)
	}
}
Number_new_jump0=new(13, 1, INT)
Number_new_jump0[0]=
{
	if $1=='#'
	{
		$2.type=NUMBER_COLOR
		$2.value_start=$3[0, $3.top]
		ret(1)
	}
	if $1=='.'
	{
		$2.type=NUMBER_FLOAT
		ret(2)
	}
	if $1=='0'
	{
		ret(3)
	}
	if $1>='1'&&$1<='9'
	{
		$2.type=NUMBER_INT
		ret(4)
	}
	ret(-2)
}
Number_new_jump0[1]=
{
	if $1>='0'&&$1<='9'||($1>='A'&&$1<='F')||($1>='a'&&$1<='f')
	{
		ret(5)
	}
	ret(-3)
}
Number_new_jump0[2]=
{
	if $1>='0'&&$1<='9'
	{
		ret(6)
	}
	if $2.minus
	{
		ret(-3)
	}
	ret(-2)
}
Number_new_jump0[3]=
{
	if $1=='.'
	{
		$2.type=NUMBER_FLOAT
		ret(6)
	}
	if $1=='B'||$1=='b'
	{
		$2.type=NUMBER_BIN
		$2.value_start=$3[0, $3.top]
		ret(7)
	}
	if $1=='X'||$1=='x'
	{
		$2.type=NUMBER_HEX
		$2.value_start=$3[0, $3.top]
		ret(1)
	}
	if $1>='0'&&$1<='9'
	{
		$2.type=NUMBER_INT
		ret(4)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	$2.type=NUMBER_INT
	ret(-1)
}
Number_new_jump0[4]=
{
	if $1=='.'
	{
		$2.type=NUMBER_FLOAT
		ret(6)
	}
	if $1>='0'&&$1<='9'
	{
		ret(4)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[5]=
{
	if $1>='0'&&$1<='9'||($1>='A'&&$1<='F')||($1>='a'&&$1<='f')
	{
		ret(5)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[6]=
{
	if $1>='0'&&$1<='9'
	{
		ret(6)
	}
	if $1=='E'||$1=='e'
	{
		ret(8)
	}
	if $1=='F'||$1=='f'
	{
		ret(9)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[7]=
{
	if $1=='0'||$1=='1'
	{
		ret(10)
	}
	ret(-3)
}
Number_new_jump0[8]=
{
	if $1=='+'||$1=='-'
	{
		ret(11)
	}
	if $1>='0'&&$1<='9'
	{
		ret(12)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[9]=
{
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[10]=
{
	if $1=='0'||$1=='1'
	{
		ret(10)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number_new_jump0[11]=
{
	if $1>='0'&&$1<='9'
	{
		ret(12)
	}
	ret(-3)
}
Number_new_jump0[12]=
{
	if $1>='0'&&$1<='9'
	{
		ret(12)
	}
	if $1=='F'||$1=='f'
	{
		ret(9)
	}
	if is_symbolic($1)
	{
		ret(-3)
	}
	ret(-1)
}
Number=new(1, 1, INT8)
Number.generate=Number_generate
Number.generate_call=Number_generate_call
Number.show=Number_show
Number.remove=Number_remove
fn Number_generate($self)
{
	$function_text=Stack_get(functions_texts)
	$statements_record=$function_text.statements_record
	$index=constants.count
	constants.count+1
	$type=$self.type
	if $type==NUMBER_INT
	{
		$value=new($self.value_length, 1, INT8)
		copy($value, $self.text, 0, $self.value_start)
		if $self.minus
		{
			fprintf(constants_record, "pc[%u]=Var_new(-%s); ", $index, $value)
		}
		else
		{
			fprintf(constants_record, "pc[%u]=Var_new(%s); ", $index, $value)
		}
		remove($value)
	}
	else{if $type==NUMBER_FLOAT
	{
		$value=new($self.value_length, 1, INT8)
		copy($value, $self.text, 0, $self.value_start)
		if $self.minus
		{
			fprintf(constants_record, "pc[%u]=Var_new2(-%s); ", $index, $value)
		}
		else
		{
			fprintf(constants_record, "pc[%u]=Var_new2(%s); ", $index, $value)
		}
		remove($value)
	}
	else{if $type==NUMBER_BIN
	{
		$value=0
		$text=$self.text
		$value_end=$self.value_start+$self.value_length
		for ($a=$self.value_start; $a!=$value_end; $a+1)
		{
			if $text[$a]=='1'
			{
				$value|1<<$value_end-1-$a
			}
		}
		if $self.minus
		{
			fprintf(constants_record, "pc[%u]=Var_new(-0x%X); ", $index, $value)
		}
		else
		{
			fprintf(constants_record, "pc[%u]=Var_new(0x%X); ", $index, $value)
		}
	}
	else{if $type==NUMBER_HEX
	{
		$value=new($self.value_length, 1, INT8)
		copy($value, $self.text, 0, $self.value_start)
		if $self.minus
		{
			fprintf(constants_record, "pc[%u]=Var_new(-0x%s); ", $index, $value)
		}
		else
		{
			fprintf(constants_record, "pc[%u]=Var_new(0x%s); ", $index, $value)
		}
		remove($value)
	}
	else{if $type==NUMBER_COLOR
	{
		generator_deinit()
		developer_error_not_implemented("color type number generation")
	}}}}}
	fprintf($statements_record, "pc[%u]", $index)
}
fn Number_generate_call($self)
{
	generator_deinit()
	developer_error_not_implemented("function call by address")
}
fn Number_show($self)
{
	begin_object()
		indent() logf("\"type\": \"Number\"") next_property()
		$type=$self.type
		indent() logf("\"number type\": \"%s\"", Number_show_table[$type]) next_property()
		indent()
			if $type==NUMBER_INT||$type==NUMBER_FLOAT
			{
				$value=new($self.value_length, 1, INT8)
				copy($value, $self.text, 0, $self.value_start)
			}
			else{if $type==NUMBER_BIN
			{
				$value=new($self.value_length+2, 1, INT8)
				$value[0]='0'
				$value[1]='b'
				copy($value, $self.text, 2, $self.value_start)
			}
			else{if $type==NUMBER_HEX
			{
				$value=new($self.value_length+2, 1, INT8)
				$value[0]='0'
				$value[1]='x'
				copy($value, $self.text, 2, $self.value_start)
			}
			else{if $type==NUMBER_COLOR
			{
				$value=new($self.value_length+1, 1, INT8)
				$value[0]='#'
				copy($value, $self.text, 1, $self.value_start)
			}}}}
			if $self.minus
			{
				logf("\"value\": \"-%s\"", $value)
			}
			else
			{
				logf("\"value\": \"%s\"", $value)
			}
			remove($value)
	end_object()
}
Number_show_table=new(5, 1, INT)
Number_show_table[NUMBER_INT]=  "integer"
Number_show_table[NUMBER_BIN]=  "binary"
Number_show_table[NUMBER_HEX]=  "hexadecimal"
Number_show_table[NUMBER_COLOR]="color"
Number_show_table[NUMBER_FLOAT]="float"
fn Number_remove($self)
{
	remove($self)
}