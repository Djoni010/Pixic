/*
Copyright (C) 2022 Серый MLGamer <Seriy-MLGamer@yandex.ru>

This file is part of Pixic.
Pixic is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Pixic is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Pixic. If not, see <https://www.gnu.org/licenses/>.
*/

UTF8_ERROR=-2

fn UTF8_file_new($filename, $mode)
{
	$file=fopen($filename, $mode)
	if $file
	{
		$self=new()

		$self.file=$file
		$self.position=0

		ret($self)
	}
	ret(-1)
}
fn UTF8_file_new2($text_container, $mode)
{
	$file=fopen_mem($text_container, $mode)
	if $file
	{
		$self=new(1, 1, INT8)

		$self.file=$file
		$self.position=0

		ret($self)
	}
	ret(-1)
}
/*fn UTF8_file_put($self, $char)
{
	$file=$self.file
	if $char!=EOF&&$char!=UTF8_ERROR
	{
		if $char<0x00000080
		{
			fputc($char, $file)
		}
		else{if $char<0x00000800
		{
			fputc($char>>6&0x1F|0xC0, $file)
			fputc($char&0x3F|0x80, $file)
		}
		else{if $char<0x00010000
		{
			fputc($char>>12&0x0F|0xE0, $file)
			fputc($char>>6&0x3F|0x80, $file)
			fputc($char&0x3F|0x80, $file)
		}
		else{if $char<0x00011000
		{
			fputc(symbol>>18&0x07|0xF0, $file)
			fputc(symbol>>12&0x3F|0x80, $file)
			fputc(symbol>>6&0x3F|0x80, $file)
			fputc(symbol&0x3F|0x80, $file)
		}
		else
		{
			ret(1)
		}}}}
		$self.position+1
		ret(0)
	}
	ret(2)
}*/
//fn UTF8_file_put_LE($self, $char)
fn UTF8_file_get($self)
{
	$file=$self.file
	$return_on_error=ftell($file)
	$char=fgetc($file)
	if $char==EOF
	{
		$self.position+1
		ret(EOF)
	}
	if ($char&0x80)==0x00
	{
		$self.position+1
		ret($char)
	}
	if ($char&0xC0)==0x80
	{
		$buffer=new(3, 1, INT8)
		$buffer[0]=$char&0x3F
		for ($a=1; $a!=4; $a+1)
		{
			$char=fgetc($file)
			if ($char&0xC0)==0x80&&$a!=3
			{
				$buffer[$a]=$char&0x3F
			}
			else{if ($char&0xE0)==0xC0&&$a==1
			{
				$self.position+1
				remove($buffer)
				ret(($char&0x1F)<<6|$buffer[0])
			}
			else{if ($char&0xF0)==0xE0&&$a==2
			{
				$self.position+1
				remove($buffer)
				ret(($char&0x0F)<<12|$buffer[1]<<6|$buffer[0])
			}
			else{if ($char&0xF8)==0xF0&&$a==3
			{
				$char=($char&0x07)<<18
				for ($b=2; $b!=-1; $b-1)
				{
					$char|$buffer[$b]<<6*$b
				}
				$self.position+1
				remove($buffer)
				ret($char)
			}
			else
			{
				fseek($file, $return_on_error, SEEK_SET)
				remove($buffer)
				ret(UTF8_ERROR)
			}}}}
		}
	}
	if ($char&0xE0)==0xC0
	{
		$result=($char&0x1F)<<6
		$char=fgetc($file)
		if ($char&0xC0)!=0x80
		{
			fseek($file, -2, SEEK_CUR)
			ret(UTF8_ERROR)
		}
		$self.position+1
		ret($char&0x3F|$result)
	}
	if ($char&0xF0)==0xE0
	{
		$result=($char&0x0F)<<12
		$char=fgetc($file)
		if ($char&0xC0)!=0x80
		{
			fseek($file, -2, SEEK_CUR)
			ret(UTF8_ERROR)
		}
		$result|($char&0x3F)<<6
		$char=fgetc($file)
		if ($char&0xC0)!=0x80
		{
			fseek($file, -3, SEEK_CUR)
			ret(UTF8_ERROR)
		}
		$self.position+1
		ret($char&0x3F|$result)
	}
	if ($char&0xF8)==0xF0
	{
		$result=($char&0x07)<<18
		for ($a=2; $a!=-1; $a-1)
		{
			$char=fgetc($file)
			if ($char&0xC0)!=0x80
			{
				fseek($file, $return_on_error, SEEK_SET)
				ret(UTF8_ERROR)
			}
			$result|($char&0x3F)<<6*$a
		}
		$self.position+1
		ret($result)
	}
	ret(UTF8_ERROR)
}
fn UTF8_file_remove($self)
{
	fclose($self.file)

	remove($self)
}